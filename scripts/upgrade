#!/bin/bash

# We retrieve app parameters
app=$YNH_APP_INSTANCE_NAME

# Backup the current version of the app, restore it if the upgrade fails
if sudo yunohost backup list | grep -q $app-before-upgrade > /dev/null 2>&1; then       # Supprime l'ancienne archive seulement si e$
        sudo yunohost backup delete $app-before-upgrade
fi
sudo yunohost backup create --ignore-hooks --apps $app --name $app-before-upgrade
EXIT_PROPERLY () {
        exit_code=$?
        if [ "$exit_code" -eq 0 ]; then
                exit 0  # Quitte sans erreur si le script se termine correctement.
        fi
        trap '' EXIT
        set +eu
        sudo yunohost app remove $app   # Supprime l'application avant de la restaurer.
        sudo yunohost backup restore --ignore-hooks $app-before-upgrade --apps $app --force     # Restore the backup if upgrade fail$
        ynh_die "Upgrade failed. The app was restored to the way it was before the failed upgrade."
}
set -eu
trap EXIT_PROPERLY EXIT

# Source app helpers
source /usr/share/yunohost/helpers

# We check variables are not empty
CHECK_VAR () {  # Vérifie que la variable n'est pas vide.
# $1 = Variable à vérifier
# $2 = Texte à afficher en cas d'erreur
        test -n "$1" || (echo "$2" >&2 && false)
}
CHECK_VAR "$app" "app name not set"

path=$(ynh_app_setting_get $app path)
domain=$(ynh_app_setting_get $app domain)
final_path=$(ynh_app_setting_get $app final_path)
sitename=$(ynh_app_setting_get $app sitename)
finalnginxconf=$(ynh_app_setting_get $app finalnginxconf)
finalphpconf=$(ynh_app_setting_get $app finalphpconf)

if [ -z "$finalnginxconf" ];
then
   finalnginxconf="/etc/nginx/conf.d/${domain}.d/${sitename}.conf"
   ynh_app_setting_set "$app" finalnginxconf "$finalnginxconf"
else
      echo "${finalnginxconf} exists, we don't create it."
fi

if [ -z "$finalphpconf" ];
then
   finalphpconf="/etc/php5/fpm/pool.d/${domain}_${sitename}.conf"
   ynh_app_setting_set "$app" finalphpconf "$finalphpconf"
else
   echo "${finalphpconf} exists, we don't create it."
fi

# Modify Nginx configuration file and copy it to Nginx conf directory
sed -i "s@PATHTOCHANGE@$path@g" ../conf/nginx.conf
sed -i "s@ALIASTOCHANGE@$final_path/@g" ../conf/nginx.conf
sed -i "s@NAMETOCHANGE@$domain\_$sitename@g" ../conf/nginx.conf

# We only replace the file if it doesn't exists already
if [ -f $finalnginxconf ];
then
   echo "File ${finalnginxconf} exists, we don't replace it."
else
   sudo cp ../conf/nginx.conf $finalnginxconf
fi



# php5-fpm configuration
sed -i "s@NAMETOCHANGE@$domain\_$sitename@g" ../conf/php-fpm.conf
sed -i "s@FOLDERTOCHANGE@webapp_multi\_$domain/$sitename@g" ../conf/php-fpm.conf

# We only replace the file if it doesn't exists already
if [ -f $finalphpconf ];
then
   echo "File ${finalphpconf} exists, we don't replace it."
else
   sudo cp ../conf/php-fpm.conf $finalphpconf
   sudo chown root: $finalphpconf
   sudo chmod 644 $finalphpconf
fi


# We adjust permissions
sudo chmod 775 /var/www/webapp\_multi
sudo chmod 775 /var/www/webapp\_multi/$domain
sudo chmod 775 -R $final_path
sudo chown www-data:www-data /var/www/webapp\_multi
sudo chown www-data:www-data /var/www/webapp\_multi/$domain
sudo chown -hR www-data:www-data $final_path


# Make app public if necessary
is_public=$(ynh_app_setting_get $app is_public)
if [ "$is_public" = "Yes" ];
then
	ynh_app_setting_set $app skipped_uris "/"
else
	ynh_app_setting_set $app protected_uris "/"
fi

# Reload Nginx and regenerate SSOwat conf
sudo service php5-fpm reload
sudo service nginx reload
sudo yunohost app ssowatconf

#!/bin/bash
#set -eu

# Charge les fonctions génériques habituellement utilisées dans le script
#source fonctions

# Active trap pour arrêter le script si une erreur est détectée.
EXIT_PROPERLY () {      # Provoque l'arrêt du script en cas d'erreur. Et nettoye les résidus.
        exit_code=$?
        if [ "$exit_code" -eq 0 ]; then
                        exit 0  # Quitte sans erreur si le script se termine correctement.
        fi
        trap '' EXIT
        set +eu
        echo -e "\e[91m \e[1m"  # Shell in light red bold
        echo -e "!!\n  $app install's script has encountered an error. Installation was cancelled.\n!!" >&2

        if type -t CLEAN_SETUP > /dev/null; then        # Vérifie l'existance de la fonction avant de l'exécuter.
                CLEAN_SETUP     # Appel la fonction de nettoyage spécifique du script install.
        fi

        # Compense le bug de ssowat qui ne supprime pas l'entrée de l'app en cas d'erreur d'installation.
        sudo sed -i "\@\"$domain$path/\":@d" /etc/ssowat/conf.json

        ynh_die
}

TRAP_ON () {    # Activate signal capture
        set -eu # Exit if a command fail, and if a variable is used unset.
        trap EXIT_PROPERLY EXIT # Capturing exit signals on shell script
}

TRAP_ON

# Source app helpers
source /usr/share/yunohost/helpers

# Retrieve arguments
app=$YNH_APP_INSTANCE_NAME
domain=$YNH_APP_ARG_DOMAIN
path=$YNH_APP_ARG_PATH
is_public=$YNH_APP_ARG_IS_PUBLIC
db_create=$YNH_APP_ARG_DB_CREATE
db_name=$YNH_APP_ARG_DB_NAME
db_pwd=$YNH_APP_ARG_DB_PWD

# We check variables are not empty
CHECK_VAR () {  # Vérifie que la variable n'est pas vide.
# $1 = Variable à vérifier
# $2 = Texte à afficher en cas d'erreur
        test -n "$1" || (echo "$2" >&2 && false)
}
CHECK_VAR "$app" "app name not set"

# Check the path value and correct it (adds / at begining and removes it at the end)
CHECK_PATH () { # Vérifie la présence du / en début de path. Et son absence à la fin.
        if [ "${path:0:1}" != "/" ]; then    # Si le premier caractère n'est pas un /
                path="/$path"    # Ajoute un / en début de path
        fi
        if [ "${path:${#path}-1}" == "/" ] && [ ${#path} -gt 1 ]; then    # Si le dernier caractère est un / et que ce n'est pas l$
                path="${path:0:${#path}-1}"     # Supprime le dernier caractère
        fi
}
CHECK_PATH

# Definition of sitename for further use
if [ $path = "/" ]
then
	sitename="root"
else
	sitename=$(echo $path | cut -d '/' -f 2)
	# Removal of trailing /
	# path can be null but not really an issue for the remaining commands
	path=${path%/}
fi

# Check domain and path availibility
CHECK_DOMAINPATH () {   # Vérifie la disponibilité du path et du domaine.
        sudo yunohost app checkurl $domain$path -a $app
}
CHECK_DOMAINPATH

# Check destination folder is not used already
CHECK_FINALPATH () {    # Vérifie que le dossier de destination n'est pas déjà utilisé.
        final_path=/var/www/$app
        if [ -e "$final_path" ]
        then
                echo "This path already contains a folder" >&2
                ynh_die
        fi
}
CHECK_FINALPATH

final_path=/var/www/webapp\_multi/$domain/$sitename


# We check if the database is required and if it exists
# If it exists, we stop the installation
if [ "$db_create" = "Yes" ];
then
	if mysqlshow -u root -p$(sudo cat /etc/yunohost/mysql ) | grep -q "^| $db_name";
	then
	   echo "${db_name} exists, we stop the script." >&2
	   ynh_die
	else
	   echo "${db_name} doesn't exists, we are good to proceed."
	fi
fi

# Define variables and Save app settings
ynh_app_setting_set "$app" domain "$domain"
ynh_app_setting_set "$app" is_public "$is_public"
ynh_app_setting_set "$app" sitename "$sitename"
ynh_app_setting_set "$app" final_path "$final_path"

finalnginxconf="/etc/nginx/conf.d/${domain}.d/${sitename}.conf"
ynh_app_setting_set "$app" finalnginxconf "$finalnginxconf"

finalphpconf="/etc/php5/fpm/pool.d/${domain}_${sitename}.conf"
ynh_app_setting_set "$app" finalphpconf "$finalphpconf"

ynh_app_setting_set "$app" db_create "$db_create"
# Database creation if requested
if [ "$db_create" = "Yes" ];
then
	ynh_app_setting_set "$app" db_name "$db_name"
	ynh_app_setting_set "$app" db_pwd "$db_pwd"
	ynh_mysql_create_db "$db_name" "$db_name" "$db_pwd";
else
	echo "No database required";
fi

# Creation of folder
#sudo rm -rf $final_path
sudo mkdir -p $final_path

# Base site
sed -i "s@DOMAINTOCHANGE@$domain@g" ../sources/index.html
sed -i "s@SITETOCHANGE@$sitename@g" ../sources/index.html
sudo cp ../sources/* $final_path/

# Set permissions
sudo chmod 775 /var/www/webapp\_multi
sudo chmod 775 /var/www/webapp\_multi/$domain
sudo chmod 775 -R $final_path
sudo chown www-data:www-data /var/www/webapp\_multi
sudo chown www-data:www-data /var/www/webapp\_multi/$domain
sudo chown -hR www-data:www-data $final_path

# Modify Nginx configuration file and copy it to Nginx conf directory
sed -i "s@PATHTOCHANGE@$path@g" ../conf/nginx.conf
sed -i "s@ALIASTOCHANGE@$final_path/@g" ../conf/nginx.conf
sed -i "s@NAMETOCHANGE@$domain\_$sitename@g" ../conf/nginx.conf
sudo cp ../conf/nginx.conf $finalnginxconf


sed -i "s@NAMETOCHANGE@$domain\_$sitename@g" ../conf/php-fpm.conf
sed -i "s@FOLDERTOCHANGE@webapp\_multi/$domain/$sitename@g" ../conf/php-fpm.conf
sudo cp ../conf/php-fpm.conf $finalphpconf
sudo chown root: $finalphpconf
sudo chmod 644 $finalphpconf

# Make app public if necessary
is_public=$(ynh_app_setting_get $app is_public)
if [ "$is_public" = "Yes" ];
then
	ynh_app_setting_set $app skipped_uris "/"
else
        ynh_app_setting_set $app protected_uris "/"
fi

# Reload Nginx and regenerate SSOwat conf
sudo service php5-fpm reload
sudo service nginx reload
sudo yunohost app ssowatconf
